{"version":3,"sources":["components/Media.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Media","props","className","style","opacity","city","country_full","Form","onSubmit","getWeather","type","name","placeholder","autoComplete","Weather","titleVisibile","country","temperature","humidity","wind","description","sunrise","sunset","error","api","api_photo","start_photo","App","state","undefined","photo","e","a","preventDefault","target","elements","value","fetch","api_call","json","data","api_photo_call","data_photo","photo_url","results","urls","full","timeDif","timezone","sunriseDate","Date","sys","sunriseHour","getUTCHours","sunriseMinutes","getUTCMinutes","sunriseTime","sunsetDate","sunsetHour","sunsetMinutes","sunsetTime","country_name","countries","setState","main","temp","speed","weather","cod","this","background","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b1fe7bf0.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Media = props => (\r\n    <div>\r\n        <div className='location-container' style={{ opacity: `${props.opacity}`}}>\r\n            <p className='location-container__city'>{props.city}</p>\r\n            <p className='location-container__country'>{props.country_full}</p>\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default Media;","import React from 'react';\r\n\r\nconst Form = props => (\r\n    <form onSubmit={props.getWeather}>\r\n        <input type=\"text\" name=\"city\" placeholder=\"City...\" autoComplete=\"off\"></input>\r\n        <input type=\"text\" name=\"country\" placeholder=\"Country (optional)\"  autoComplete=\"off\"></input>\r\n        <button>Get Weather</button>\r\n    </form>\r\n);\r\n\r\nexport default Form;","import React from 'react';\r\n\r\nconst Weather = props => (\r\n    <div className='weather__info'>\r\n        { props.titleVisibile && <div className='title-container'>  \r\n                                    <h1 className='title-container__title'>Your Weather App</h1>\r\n                                    <p className='title-container__subtitle'>Check the weather anywhere anytime!</p>\r\n                                </div>\r\n        }\r\n\r\n        { props.city && props.country && <p className='weather__key__title'>The Weather for You</p> }\r\n        { props.city && props.country && <p className='weather__key'>Location: <span className='weather__value'> {props.city}, {props.country}</span></p> }\r\n        { props.temperature && <p className='weather__key'>Temperature: <span className='weather__value'> {props.temperature}Â°C</span></p> }\r\n        { props.humidity && <p className='weather__key'>Humidity: <span className='weather__value'> {props.humidity}%</span></p> }\r\n        { props.wind && <p className='weather__key'>Wind: <span className='weather__value'> {props.wind} m/sec</span></p> }\r\n        { props.description && <p className='weather__key'>Conditions: <span className='weather__value'> {props.description}</span></p> }\r\n        { props.sunrise && <p className='weather__key'>Sunrise: <span className='weather__value'> {props.sunrise}</span></p> }\r\n        { props.sunset && <p className='weather__key'>Sunset: <span className='weather__value'> {props.sunset}</span></p> }\r\n        { props.error && <p className='weather__error'>{props.error}</p> }\r\n    </div>\r\n);\r\n\r\nexport default Weather;","import React from 'react';\nimport \"./App.css\";\nimport { countries } from 'country-data';\n\nimport Media from './components/Media';\nimport Form from './components/Form';\nimport Weather from './components/Weather';\n\nconst api = 'f7c1fddfc8e25ad4eb6f224be8db72e0';\nconst api_photo = '1f58255b5a31b6ff84cf63304d9e5ff36f42369cc7d83579e07d7fa98ef48edb';\nconst start_photo ='https://images.unsplash.com/photo-1541251680333-ae8ae4c943af?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=634&q=80';\n\nclass App extends React.Component {\n  state = {\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    country_full: undefined,\n    humidity: undefined,\n    wind: undefined,\n    description: undefined,\n    sunrise: undefined,\n    sunset: undefined,\n    photo: start_photo,\n    opacity: 0,\n    titleVisibile: true,\n    error: undefined\n  }\n\n  getWeather = async (e) => {\n    e.preventDefault();\n\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n\n    let api_call;\n    let data;\n    // let photo_url;\n\n    if (city) {\n      api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${api}&units=metric`);\n      data = await api_call.json();\n    }\n    if (city && country) {\n      api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${api}&units=metric`);\n      data = await api_call.json();\n    }\n\n    if (city && \"name\" in data) {\n      const api_photo_call = await fetch(`https://api.unsplash.com/search/photos/?client_id=${api_photo}&page=1&query=${city}-${country}`);\n      const data_photo = await api_photo_call.json();\n      const photo_url = data_photo.results[0].urls.full;\n\n      const timeDif = data.timezone / 3600;\n      const sunriseDate = new Date(data.sys.sunrise * 1000);\n      let sunriseHour = sunriseDate.getUTCHours() + timeDif;\n      if (sunriseHour > 24) {\n        sunriseHour = timeDif - (24 - sunriseDate.getUTCHours());\n      }\n      let sunriseMinutes = sunriseDate.getUTCMinutes();\n\n      if (sunriseHour < 10) {\n        sunriseHour = '0' + sunriseHour;\n      }\n\n      if (sunriseMinutes < 10) {\n        sunriseMinutes = '0' + sunriseMinutes;\n      }\n\n      const sunriseTime = sunriseHour + ':' + sunriseMinutes;\n\n      const sunsetDate = new Date(data.sys.sunset * 1000)\n      let sunsetHour = sunsetDate.getUTCHours() + timeDif;\n      if (sunsetHour <= 0) {\n        sunsetHour = timeDif + (24 + sunsetHour.getUTCHours());\n      }\n      let sunsetMinutes = sunsetDate.getUTCMinutes();\n\n      if (sunsetHour < 10) {\n        sunsetHour = '0' + sunsetHour;\n      }\n\n      if (sunsetMinutes < 10) {\n        sunsetMinutes = '0' + sunsetMinutes;\n      }\n\n      const sunsetTime = sunsetHour + ':' + sunsetMinutes;\n\n      const country_name = countries[data.sys.country].name;\n\n      this.setState({\n        temperature: data.main.temp,\n        city: data.name,\n        country: data.sys.country,\n        country_full: country_name,\n        humidity: data.main.humidity,\n        wind: data.wind.speed,\n        description: data.weather[0].description,\n        sunrise: sunriseTime,\n        sunset: sunsetTime,\n        photo: photo_url,\n        opacity: 0.7,\n        titleVisibile: false,\n        error: undefined\n      });\n    }\n    if (!city) {\n      this.setState({\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        country_full: undefined,\n        humidity: undefined,\n        wind: undefined,\n        description: undefined,\n        sunrise: undefined,\n        sunset: undefined,\n        photo: start_photo,\n        opacity: 0,\n        titleVisibile: false,\n        error: 'Please enter the city value.'\n      });\n    }\n    if (city && data.cod === '404') {\n      this.setState({\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        country_full: undefined,\n        humidity: undefined,\n        wind: undefined,\n        description: undefined,\n        sunrise: undefined,\n        sunset: undefined,\n        photo: start_photo,\n        opacity: 0,\n        titleVisibile: false,\n        error: 'Please enter the city (country) name correctly.'\n      });\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"wrapper\">\n          <div className=\"dyn-1\"></div>\n          <div className=\"dyn-2\"></div>\n          <div className=\"main\">\n            <div className=\"container\">\n              <div className=\"row\">\n                <div className=\"col-xs-12 form-container\">\n                  <Form getWeather={this.getWeather} />\n                </div>\n              </div>\n              <div className=\"row\">\n                <div className=\"col-xs-6 media-container\" style={{ background: `url(${this.state.photo}) center center no-repeat`}}>\n                  <Media {...this.state} />\n                </div>\n                <div className=\"col-xs-6 weather-container\">\n                  <Weather {...this.state}/>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"./App.css\";\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}